// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network/consensus/adapters/candidate/profile.proto

package candidate

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_insolar_insolar "github.com/insolar/insolar/insolar"
	github_com_insolar_insolar_network_consensus_gcpv2_api_member "github.com/insolar/insolar/network/consensus/gcpv2/api/member"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Profile struct {
	Address     string                                                                    `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Ref         github_com_insolar_insolar_insolar.Reference                              `protobuf:"bytes,2,opt,name=Ref,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Ref"`
	ShortID     github_com_insolar_insolar_insolar.ShortNodeID                            `protobuf:"varint,3,opt,name=ShortID,proto3,customtype=github.com/insolar/insolar/insolar.ShortNodeID" json:"ShortID"`
	PrimaryRole github_com_insolar_insolar_network_consensus_gcpv2_api_member.PrimaryRole `protobuf:"varint,4,opt,name=PrimaryRole,proto3,customtype=github.com/insolar/insolar/network/consensus/gcpv2/api/member.PrimaryRole" json:"PrimaryRole"`
	SpecialRole github_com_insolar_insolar_network_consensus_gcpv2_api_member.SpecialRole `protobuf:"varint,5,opt,name=SpecialRole,proto3,customtype=github.com/insolar/insolar/network/consensus/gcpv2/api/member.SpecialRole" json:"SpecialRole"`
	Digest      []byte                                                                    `protobuf:"bytes,6,opt,name=Digest,proto3" json:"Digest,omitempty"`
	Signature   []byte                                                                    `protobuf:"bytes,7,opt,name=Signature,proto3" json:"Signature,omitempty"`
	PublicKey   []byte                                                                    `protobuf:"bytes,8,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
}

func (m *Profile) Reset()      { *m = Profile{} }
func (*Profile) ProtoMessage() {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_596ab827efe14e1f, []int{0}
}
func (m *Profile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return m.Size()
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Profile)(nil), "candidate.Profile")
}

func init() {
	proto.RegisterFile("network/consensus/adapters/candidate/profile.proto", fileDescriptor_596ab827efe14e1f)
}

var fileDescriptor_596ab827efe14e1f = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xb1, 0x8e, 0xd3, 0x30,
	0x18, 0xc7, 0x6d, 0x0a, 0x2d, 0x35, 0xb0, 0x64, 0x40, 0x16, 0x42, 0xbe, 0x8a, 0xa9, 0x03, 0xc4,
	0xd2, 0x81, 0x98, 0x58, 0xa8, 0x2a, 0xa4, 0x0a, 0x09, 0x05, 0xf7, 0x09, 0x9c, 0xe4, 0x4b, 0xce,
	0x22, 0x89, 0x23, 0xdb, 0x01, 0xdd, 0xc6, 0x23, 0xf0, 0x18, 0x3c, 0x4a, 0xc7, 0x8e, 0x27, 0x86,
	0x13, 0x49, 0x17, 0xc6, 0x1b, 0x91, 0x58, 0x50, 0xdc, 0x5e, 0x89, 0x40, 0x42, 0x0c, 0x4c, 0xc9,
	0xff, 0xfb, 0xe7, 0xfb, 0xfd, 0xa4, 0xd8, 0xe4, 0xb4, 0x02, 0xf7, 0x41, 0x9b, 0x77, 0x3c, 0xd1,
	0x95, 0x85, 0xca, 0x36, 0x96, 0xcb, 0x54, 0xd6, 0x0e, 0x8c, 0xe5, 0x89, 0xac, 0x52, 0x95, 0x4a,
	0x07, 0xbc, 0x36, 0x3a, 0x53, 0x05, 0x84, 0xb5, 0xd1, 0x4e, 0x07, 0xd3, 0x63, 0xf1, 0xe0, 0x49,
	0xae, 0xdc, 0x59, 0x13, 0x87, 0x89, 0x2e, 0x79, 0xae, 0x73, 0xcd, 0xfd, 0x17, 0x71, 0x93, 0xf9,
	0xe4, 0x83, 0x7f, 0xdb, 0x6f, 0x3e, 0xfa, 0x31, 0x22, 0x93, 0x68, 0xcf, 0x0a, 0x28, 0x99, 0xbc,
	0x4c, 0x53, 0x03, 0xd6, 0x52, 0x3c, 0xc3, 0xf3, 0xa9, 0xb8, 0x8e, 0xc1, 0x2b, 0x32, 0x12, 0x90,
	0xd1, 0x1b, 0x33, 0x3c, 0xbf, 0xbb, 0x78, 0xb6, 0xb9, 0x3c, 0x41, 0x5f, 0x2e, 0x4f, 0x1e, 0x0f,
	0x4c, 0xaa, 0xb2, 0xba, 0x90, 0xe6, 0xf7, 0x67, 0x28, 0x20, 0x03, 0x03, 0x55, 0x02, 0xa2, 0x07,
	0x04, 0x11, 0x99, 0xac, 0xcf, 0xb4, 0x71, 0xab, 0x25, 0x1d, 0xcd, 0xf0, 0xfc, 0xde, 0xe2, 0xf9,
	0x81, 0x15, 0xfe, 0x03, 0xcb, 0x6f, 0xbe, 0xd1, 0x29, 0xac, 0x96, 0xe2, 0x1a, 0x13, 0x58, 0x72,
	0x27, 0x32, 0xaa, 0x94, 0xe6, 0x5c, 0xe8, 0x02, 0xe8, 0x4d, 0x4f, 0x7d, 0x7b, 0xa0, 0xae, 0xfe,
	0x42, 0xfd, 0xf3, 0x2f, 0xe7, 0x49, 0xfd, 0xfe, 0x94, 0xcb, 0x5a, 0xf1, 0x12, 0xca, 0x18, 0x4c,
	0x38, 0x00, 0x8b, 0xa1, 0xa5, 0x97, 0xae, 0x6b, 0x48, 0x94, 0x2c, 0xbc, 0xf4, 0xd6, 0xff, 0x94,
	0x0e, 0xc0, 0x62, 0x68, 0x09, 0xee, 0x93, 0xf1, 0x52, 0xe5, 0x60, 0x1d, 0x1d, 0xf7, 0xc7, 0x20,
	0x0e, 0x29, 0x78, 0x48, 0xa6, 0x6b, 0x95, 0x57, 0xd2, 0x35, 0x06, 0xe8, 0xc4, 0x57, 0xbf, 0x06,
	0x7d, 0x1b, 0x35, 0x71, 0xa1, 0x92, 0xd7, 0x70, 0x4e, 0x6f, 0xef, 0xdb, 0xe3, 0x60, 0xf1, 0x62,
	0xd3, 0x32, 0xb4, 0x6d, 0x19, 0xba, 0x68, 0x19, 0xba, 0x6a, 0x19, 0xfe, 0xde, 0x32, 0xf4, 0xb1,
	0x63, 0xf8, 0x73, 0xc7, 0xf0, 0xa6, 0x63, 0x78, 0xdb, 0x31, 0xfc, 0xb5, 0x63, 0xf8, 0x5b, 0xc7,
	0xd0, 0x55, 0xc7, 0xf0, 0xa7, 0x1d, 0x43, 0xdb, 0x1d, 0x43, 0x17, 0x3b, 0x86, 0xe2, 0xb1, 0xbf,
	0x42, 0x4f, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x64, 0x96, 0x7b, 0x0e, 0xb2, 0x02, 0x00, 0x00,
}

func (this *Profile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Profile)
	if !ok {
		that2, ok := that.(Profile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	if !this.ShortID.Equal(that1.ShortID) {
		return false
	}
	if !this.PrimaryRole.Equal(that1.PrimaryRole) {
		return false
	}
	if !this.SpecialRole.Equal(that1.SpecialRole) {
		return false
	}
	if !bytes.Equal(this.Digest, that1.Digest) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	return true
}
func (this *Profile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&candidate.Profile{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Ref: "+fmt.Sprintf("%#v", this.Ref)+",\n")
	s = append(s, "ShortID: "+fmt.Sprintf("%#v", this.ShortID)+",\n")
	s = append(s, "PrimaryRole: "+fmt.Sprintf("%#v", this.PrimaryRole)+",\n")
	s = append(s, "SpecialRole: "+fmt.Sprintf("%#v", this.SpecialRole)+",\n")
	s = append(s, "Digest: "+fmt.Sprintf("%#v", this.Digest)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProfile(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Profile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintProfile(dAtA, i, uint64(m.Ref.Size()))
	n1, err := m.Ref.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.ShortID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProfile(dAtA, i, uint64(m.ShortID))
	}
	if m.PrimaryRole != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProfile(dAtA, i, uint64(m.PrimaryRole))
	}
	if m.SpecialRole != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProfile(dAtA, i, uint64(m.SpecialRole))
	}
	if len(m.Digest) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Digest)))
		i += copy(dAtA[i:], m.Digest)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintProfile(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	return i, nil
}

func encodeVarintProfile(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Profile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = m.Ref.Size()
	n += 1 + l + sovProfile(uint64(l))
	if m.ShortID != 0 {
		n += 1 + sovProfile(uint64(m.ShortID))
	}
	if m.PrimaryRole != 0 {
		n += 1 + sovProfile(uint64(m.PrimaryRole))
	}
	if m.SpecialRole != 0 {
		n += 1 + sovProfile(uint64(m.SpecialRole))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func sovProfile(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProfile(x uint64) (n int) {
	return sovProfile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Profile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Profile{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Ref:` + fmt.Sprintf("%v", this.Ref) + `,`,
		`ShortID:` + fmt.Sprintf("%v", this.ShortID) + `,`,
		`PrimaryRole:` + fmt.Sprintf("%v", this.PrimaryRole) + `,`,
		`SpecialRole:` + fmt.Sprintf("%v", this.SpecialRole) + `,`,
		`Digest:` + fmt.Sprintf("%v", this.Digest) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProfile(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ref.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortID", wireType)
			}
			m.ShortID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShortID |= github_com_insolar_insolar_insolar.ShortNodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryRole", wireType)
			}
			m.PrimaryRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryRole |= github_com_insolar_insolar_network_consensus_gcpv2_api_member.PrimaryRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialRole", wireType)
			}
			m.SpecialRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialRole |= github_com_insolar_insolar_network_consensus_gcpv2_api_member.SpecialRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProfile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProfile
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthProfile
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProfile
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProfile(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthProfile
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProfile = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProfile   = fmt.Errorf("proto: integer overflow")
)
