name: master
on:
  push:
    branches:
      - master
env:
  GO_VERSION: 1.12.15
  KUBECONFIG: k3s.yaml
jobs:
  build-and-push:
    name: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@master
      - name: gather info
        id: info
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=build_date::$(shell ./scripts/dev/git-date-time.sh -d)"
          echo "::set-output name=build_time::$(shell ./scripts/dev/git-date-time.sh -t)"
          echo "::set-output name=build_version::latest"
      - name: pack project
        run: |
          docker build -t insolar:${{ steps.info.outputs.build_version }} --pull --build-arg "GOLANG_VERSION=${{env.GO_VERSION}}" --build-arg "BUILD_NUMBER=$GITHUB_RUN_NUMBER" --build-arg "BUILD_DATE=${{ steps.info.outputs.build_date }}" --build-arg "BUILD_TIME=${{ steps.info.outputs.build_time }}" --build-arg "BUILD_HASH=${{ steps.info.outputs.sha_short }}" --build-arg "BUILD_VERSION=${{ steps.info.outputs.build_version }}" .
          docker tag insolar:${{ steps.info.outputs.build_version }} insolar/mainnet:${{ steps.info.outputs.build_version }}
          docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
          docker push insolar/mainnet:${{ steps.info.outputs.build_version }}
  test:
    name: test
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: initialize variables
        id: info
        run: |
          echo ::set-output name=MAINNET_VERSION::${GITHUB_REF/refs\/tags\//}
      - name: checkout code
        uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}
      - name: spin up k3s
        uses: insolar/k3s-gha@v0.1
        with:
          kubectl_version: "v1.18.2"
          k3s_tag: "v1.17.4-k3s1"
      - name: set PAT for github http auth
        run: |
          git config --global url."https://${{secrets.INS_SERVICE_PAT}}@github.com/".insteadOf "https://github.com/"
          kubectl create ns insolar && kubectl -n insolar create secret generic ins-service-pat --from-literal=INS_SERVICE_PAT=${{secrets.INS_SERVICE_PAT}}
      - name: set mainnet image version
        run: sed -i -e 's/mainnet_tag/${{ steps.info.outputs.MAINNET_VERSION }}/g' deploy/mainnet/kustomization.yaml
      - name: deploy insolar-mainnet
        run:  kubectl apply -k deploy/block-explorer
      - name: wait for bootstrap completion
        run: |
          echo "waiting for bootstrap completion…"
          for attempt in {1..120}; do
            STATUS=$(kubectl -n insolar get po bootstrap -o jsonpath='{.status.phase}')
            [[ "${STATUS}" == "Succeeded" ]] && exit 0 || sleep 1
          done
          exit 1
      - name: wait for insolar network initialization
        run: |
          echo "waiting for insolar network initialization…"
          for try in {0..90}; do
            if kubectl -n insolar exec -i deploy/pulsewatcher -- bash -c 'pulsewatcher -c /etc/pulsewatcher/pulsewatcher.yaml -s' | grep 'READY' | grep -v 'NOT'; then
              exit 0
            else
              sleep 1
            fi
          done
          exit 1
      - name: wait for observer-replicator pod to be up and running
        run: kubectl -n insolar rollout status sts/observer-replicator -w --timeout=90s
      - name: wait for generic-block-explorer pod to be up and running
        run: kubectl -n insolar rollout status deployment/block-explorer -w --timeout=90s
      - name: collect logs
        run: |
          kubectl logs -l app!='block-explorer-frontend' -n insolar --all-containers=true > out.log
          exit 0
      - name: Send failure notification to Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTIONS_NOTIFICATIONS_SLACK_HOOK_URL }}
      - name: Upload logs to artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: "**/*.log"

